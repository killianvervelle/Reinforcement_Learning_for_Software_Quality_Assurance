name: RL Workflow

on: 
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: my_ecr_repository           
  ECS_SERVICE: my_ecs_service                 
  ECS_CLUSTER: my_ecs_cluster                 
  ECS_TASK_DEFINITION: ppo/app/task-definition.json

  CONTAINER_NAME: my-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR
          docker build -f ppo/app/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Debug Image Output
        run: |
          echo "Built image: ${{ steps.build-image.outputs.image }}"

      - name: Update ECS task definition with the new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy the updated ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  run_rl_agent:
    needs: deploy
    runs-on: ubuntu-latest
    environment: production
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11
      
      - name: Set up Python environment
        run: |
          python3 -m venv venv
          source ./venv/bin/activate
      
      - name: Install dependencies
        run: |
          pip install -r ppo/requirements.txt
      
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd):$PYTHONPATH" >> $GITHUB_ENV
  
      - name: Run script to collect and save dataset to S3
        run: |
          pwd
          python ppo/app/src/resourceTuner.py  

      - name: Run script to train and save the model to S3
        run: |
          python ppo/app/src/predictor.py  

      - name: Run the PPO framework
        run: |
          python ppo/app/src/main.py



          