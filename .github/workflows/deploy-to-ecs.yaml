name: RL Workflow

on: 
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: my_ecr_repository           
  ECS_SERVICE: my_ecs_service                 
  ECS_CLUSTER: my_ecs_cluster                 
  ECS_TASK_DEFINITION: ppo/app/task-definition.json

jobs:


  build-api-image:
    runs-on: ubuntu-latest
    environment: production
    env:
        IMAGE_TAG: api
    outputs:
      output: ${{ steps.build-api.outputs.api_image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push API image to Amazon ECR
        id: build-api
        run: |
          docker build --no-cache -f ppo/app/src/api/Dockerfile \
            -t ${{ steps.login-ecr.outputs.registry }}/${{env.ECR_REPOSITORY}}:$IMAGE_TAG ppo/
          docker push ${{ steps.login-ecr.outputs.registry }}/${{env.ECR_REPOSITORY}}:$IMAGE_TAG
          echo "api_image=${{env.ECR_REPOSITORY}}:$IMAGE_TAG" >> $GITHUB_ENV
          echo "api_image=${{env.ECR_REPOSITORY}}:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Use API image in ECS task definition
        run: |
          echo "API image: $api_image"
          

  deploy-ecs:
    runs-on: ubuntu-latest
    environment: production
    needs: build-api-image
    env:

      PORT_API: 8000

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Update ECS task definition
        id: update-task-def
        run: |
          cp ${{ env.ECS_TASK_DEFINITION }} updated-task-definition.json

          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          SUT_IMAGE="${{ needs.build-sut-image.outputs.output }}"
          API_IMAGE="${{ needs.build-api-image.outputs.output }}"

    

          jq --arg IMAGE "$ECR_REGISTRY/$API_IMAGE" \
             --argjson PORT ${{ env.PORT_API }} \
             '(.containerDefinitions[] | select(.name == "api-container") | .image) = $IMAGE |
              (.containerDefinitions[] | select(.name == "api-container") | .portMappings[0].containerPort) = $PORT |
              (.containerDefinitions[] | select(.name == "api-container") | .portMappings[0].name) = "api"' \
             updated-sut-task.json > final-task-definition.json

          # Output the final task definition for debugging
          cat final-task-definition.json

      - name: Deploy updated ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: final-task-definition.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true






