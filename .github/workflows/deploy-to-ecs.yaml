name: RL Workflow

on: 
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: my_ecr_repository           
  ECS_SERVICE: my_ecs_service                 
  ECS_CLUSTER: my_ecs_cluster                 
  ECS_TASK_DEFINITION: ppo/app/task-definition.json

  CONTAINER_NAME: my-app

  PORT_SUT: 8001
  PORT_API: 8000

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push SUT image to Amazon ECR
        id: build-sut-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: sut
        run: |
          docker build -f ppo/app/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg PORT=$PORT_SUT ppo/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Debug SUT Image Output
        run: |
          echo "SUT image: ${{ steps.build-sut-image.outputs.image }}"

      - name: Build, tag, and push API image to Amazon ECR
        id: build-api-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: api
        run: |
          docker build -f ppo/app/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg PORT=$PORT_API ppo/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Debug API Image Output
        run: |
          echo "API image: ${{ steps.build-api-image.outputs.image }}"

      - name: Update ECS task definition
        id: update-task-def
        run: |
          cp ${{ env.ECS_TASK_DEFINITION }} updated-task-definition.json

          jq --arg IMAGE "${{ steps.build-sut-image.outputs.image }}" \
             --argjson PORT ${{ env.PORT_SUT }} \
             '(.containerDefinitions[] | select(.name == "sut-container") | .image) = $IMAGE |
              (.containerDefinitions[] | select(.name == "sut-container") | .portMappings[0].containerPort) = $PORT |
              (.containerDefinitions[] | select(.name == "sut-container") | .portMappings[0].name) = "sut-port"' \
             updated-task-definition.json > updated-sut-task.json

          jq --arg IMAGE "${{ steps.build-api-image.outputs.image }}" \
             --argjson PORT ${{ env.PORT_API }} \
             '(.containerDefinitions[] | select(.name == "api-container") | .image) = $IMAGE |
              (.containerDefinitions[] | select(.name == "api-container") | .portMappings[0].containerPort) = $PORT |
              (.containerDefinitions[] | select(.name == "api-container") | .portMappings[0].name) = "api-port"' \
             updated-sut-task.json > final-task-definition.json

          # Output the final task definition for debugging
          cat final-task-definition.json

      - name: Deploy updated ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: final-task-definition.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true




